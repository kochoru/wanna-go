{"version":3,"sources":["withRoot.tsx","pages/Index.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","purple","secondary","green","typography","useNextVariants","withRoot","Component","props","react","core_styles","index_es","cards","Album","_this","this","CssBaseline_default","a","AppBar_default","position","className","classes","appBar","Toolbar_default","Typography_default","variant","color","noWrap","heroUnit","heroContent","component","align","gutterBottom","paragraph","heroButtons","Grid_default","container","spacing","justify","item","Button_default","classNames","layout","cardGrid","map","card","key","sm","md","lg","Card_default","CardMedia_default","cardMedia","image","title","CardContent_default","cardContent","CardActions_default","size","footer","React","withStyles","createStyles","backgroundColor","background","paper","maxWidth","margin","padding","concat","unit","marginTop","Object","defineProperty","width","marginLeft","marginRight","breakpoints","up","height","display","flexDirection","paddingTop","flexGrow","Boolean","window","location","hostname","match","ReactDOM","render","react_default","createElement","Index","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d024bc9.chunk.js","sourcesContent":["import * as React from 'react'\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport purple from '@material-ui/core/colors/purple'\nimport green from '@material-ui/core/colors/green'\nimport { CssBaseline } from '@material-ui/core';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: purple,\n    secondary: green,\n  },\n  typography: {\n    useNextVariants: true,\n  },\n})\n\nfunction withRoot<P>(Component: React.ComponentType<P>) {\n  function WithRoot(props: P) {\n    return (\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <Component {...props} />\n      </MuiThemeProvider>\n    )\n  }\n\n  return WithRoot\n}\n\nexport default withRoot\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { Theme } from '@material-ui/core/styles/createMuiTheme'\nimport createStyles from '@material-ui/core/styles/createStyles'\nimport withStyles, { WithStyles } from '@material-ui/core/styles/withStyles'\nimport withRoot from '../withRoot'\n\nconst styles = (theme: Theme) => \n  createStyles({\n    appBar: {\n      position: 'relative',\n    },\n    heroUnit: {\n      backgroundColor: theme.palette.background.paper,\n    },\n    heroContent: {\n      maxWidth: 600,\n      margin: '0 auto',\n      padding: `${theme.spacing.unit * 8}px 0 ${theme.spacing.unit * 6}px`,\n    },\n    heroButtons: {\n      marginTop: theme.spacing.unit * 4,\n    },\n    layout: {\n      width: 'auto',\n      marginLeft: theme.spacing.unit * 3,\n      marginRight: theme.spacing.unit * 3,\n      [theme.breakpoints.up(1100 + theme.spacing.unit * 3 * 2)]: {\n        width: 1100,\n        marginLeft: 'auto',\n        marginRight: 'auto',\n      },\n    },\n    cardGrid: {\n      padding: `${theme.spacing.unit * 8}px 0`,\n    },\n    card: {\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    cardMedia: {\n      paddingTop: '56.25%', // 16:9\n    },\n    cardContent: {\n      flexGrow: 1,\n    },\n    footer: {\n      backgroundColor: theme.palette.background.paper,\n      padding: theme.spacing.unit * 6,\n    },\n  });\n\nconst cards = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\nclass Album extends React.Component<WithStyles<typeof styles>> {\n  render() {\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        <AppBar position=\"static\" className={this.props.classes.appBar}>\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\" noWrap>\n              Album layout\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <main>\n          {/* Hero unit */}\n          <div className={this.props.classes.heroUnit}>\n            <div className={this.props.classes.heroContent}>\n              <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n                Album layout\n              </Typography>\n              <Typography variant=\"h6\" align=\"center\" color=\"textSecondary\" paragraph>\n                Something short and leading about the collection belowâ€”its contents, the creator, etc.\n                Make it short and sweet, but not too short so folks don&apos;t simply skip over it\n                entirely.\n              </Typography>\n              <div className={this.props.classes.heroButtons}>\n                <Grid container spacing={16} justify=\"center\">\n                  <Grid item>\n                    <Button variant=\"contained\" color=\"primary\">\n                      Main call to action\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"outlined\" color=\"primary\">\n                      Secondary action\n                    </Button>\n                  </Grid>\n                </Grid>\n              </div>\n            </div>\n          </div>\n          <div className={classNames(this.props.classes.layout, this.props.classes.cardGrid)}>\n            {/* End hero unit */}\n            <Grid container spacing={40}>\n              {cards.map(card => (\n                <Grid item key={card} sm={6} md={4} lg={3}>\n                  <Card className={this.props.classes.card}>\n                    <CardMedia\n                      className={this.props.classes.cardMedia}\n                      image=\"data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22288%22%20height%3D%22225%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20288%20225%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_164edaf95ee%20text%20%7B%20fill%3A%23eceeef%3Bfont-weight%3Abold%3Bfont-family%3AArial%2C%20Helvetica%2C%20Open%20Sans%2C%20sans-serif%2C%20monospace%3Bfont-size%3A14pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_164edaf95ee%22%3E%3Crect%20width%3D%22288%22%20height%3D%22225%22%20fill%3D%22%2355595c%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%2296.32500076293945%22%20y%3D%22118.8%22%3EThumbnail%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E\" // eslint-disable-line max-len\n                      title=\"Image title\"\n                    />\n                    <CardContent className={this.props.classes.cardContent}>\n                      <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        Heading\n                      </Typography>\n                      <Typography>\n                        This is a media card. You can use this section to describe the content.\n                      </Typography>\n                    </CardContent>\n                    <CardActions>\n                      <Button size=\"small\" color=\"primary\">\n                        View\n                      </Button>\n                      <Button size=\"small\" color=\"primary\">\n                        Edit\n                      </Button>\n                    </CardActions>\n                  </Card>\n                </Grid>\n              ))}\n            </Grid>\n          </div>\n        </main>\n        {/* Footer */}\n        <footer className={this.props.classes.footer}>\n          <Typography variant=\"h6\" align=\"center\" gutterBottom>\n            Footer\n          </Typography>\n          <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\n            Something here to give the footer a purpose!\n          </Typography>\n        </footer>\n        {/* End footer */}\n      </React.Fragment>\n    );\n  }\n}\n\n// Album.propTypes = {\n//   classes: PropTypes.object.isRequired,\n// };\n\nexport default withRoot(withStyles(styles)(Album))","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Index from './pages/Index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}